/**************************************************************************************************
 * Copyright (c) 2020 Calypso Networks Association                                                *
 * https://www.calypsonet-asso.org/                                                               *
 *                                                                                                *
 * See the NOTICE file(s) distributed with this work for additional information regarding         *
 * copyright ownership.                                                                           *
 *                                                                                                *
 * This program and the accompanying materials are made available under the terms of the Eclipse  *
 * Public License 2.0 which is available at http://www.eclipse.org/legal/epl-2.0                  *
 *                                                                                                *
 * SPDX-License-Identifier: EPL-2.0                                                               *
 **************************************************************************************************/

#pragma once

/* Core */
#include "ApduResponse.h"

/* Calypso */
#include "AbstractPoResponseParser.h"
#include "KeypleCalypsoExport.h"
#include "SvGetCmdBuild.h"
#include "SvLoadLogRecord.h"
#include "SvDebitLogRecord.h"

namespace keyple {
namespace calypso {
namespace command {
namespace po {
namespace parser {
namespace storedvalue {

using namespace keyple::calypso::command::po;
using namespace keyple::calypso::command::po::builder::storedvalue;
using namespace keyple::core::seproxy::message;

using StatusProperties = AbstractApduResponseParser::StatusProperties;

/**
 * SV Get (007C) response parser. See specs: Calypso
 */
class KEYPLECALYPSO_API SvGetRespPars final : public AbstractPoResponseParser {
public:
    /**
     * Constructor to build a parser of the SvGet command response.
     *
     * @param svCommandHeader the SvGet command header bytes
     * @param response response to parse
     * @param builder the reference to the builder that created this parser
     */
    SvGetRespPars(const std::vector<uint8_t>& svCommandHeader,
                  std::shared_ptr<ApduResponse> response,
                  SvGetCmdBuild* builder);

    /**
     * Gets the command header used to build the prepare load/debit/undebit SAM commands
     *
     * @return a byte array containing the header data
     */
    const std::vector<uint8_t>& getSvGetCommandHeader() const;

    /**
     * Gets the current SV KVC
     *
     * @return the value of the current KVC
     */
    uint8_t getCurrentKVC() const;

    /**
     * Gets the SV transaction number
     *
     * @return the value of the SV transaction number
     */
    int getTransactionNumber() const;

    /**
     * Gets the SignatureLo value of the last SV transaction (reload, debit, undebit)
     *
     * @return a byte array containing the signature data
     */
    const std::vector<uint8_t>& getPreviousSignatureLo() const;

    /**
     * Gets the new challenge value generated by the command
     *
     * @return a byte array containing the challenge
     */
    const std::vector<uint8_t>& getChallengeOut() const;

    /**
     * Gets the current SV balance
     *
     * @return the value of the SV balance
     */
    int getBalance() const;

    /**
     * Gets a keyple::calypso::transaction::SvLoadLogRecord containing the load record <br>
     * May return null if the load record is not available (debit/undebit case for PO rev &lt; 3.2)
     *
     * @return a keyple::calypso::transaction::SvLoadLogRecord object containing the log data or
     *         null
     */
    const std::shared_ptr<SvLoadLogRecord> getLoadLog() const;

    /**
     * Gets a keyple::calypso::transaction::SvDebitLogRecord containing the last debit record <br>
     * May return null if the debit record is not available (load case for PO rev &lt; 3.2)
     *
     * @return a keyple::calypso::transaction::SvDebitLogRecord object containing the log data or
     *         null
     */
    const std::shared_ptr<SvDebitLogRecord> getDebitLog() const;

protected:
    /**
     *
     */
    const std::map<int, std::shared_ptr<StatusProperties>>& getStatusTable() const override;

private:
    /**
     *
     */
    static const std::map<int, std::shared_ptr<StatusProperties>> STATUS_TABLE;

    /**
     *
     */
    uint8_t mCurrentKVC;

    /**
     *
     */
    int mTransactionNumber;

    /**
     *
     */
    std::vector<uint8_t> mPreviousSignatureLo;

    /**
     *
     */
    std::vector<uint8_t> mChallengeOut;

    /**
     *
     */
    int mBalance;

    /**
     *
     */
    const std::vector<uint8_t> mSvCommandHeader;

    /**
     *
     */
    std::shared_ptr<SvLoadLogRecord> mLoadLog;

    /**
     *
     */
    std::shared_ptr<SvDebitLogRecord> mDebitLog;
};

}
}
}
}
}
}
